<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function ($scope) {
    /* widget controller */
    var c = this;
    c.analyzePayload = analyzePayload;
    c.addNewTable = addNewTable;
    c.addNewColumn = addNewColumn;
    c.addNewRelationship = addNewRelationship;
    c.deleteColumn = deleteColumn;
    c.deleteTable = deleteTable;
    c.deleteRelationship = deleteRelationship
    c.allColumnsCompressed = allColumnsCompressed
    c.compressOrExpandAllColumns = compressOrExpandAllColumns;
    c.buildRelationshipQuery = buildRelationshipQuery;
    c.saveMap = saveMap;
    c.testIandR = testIandR;
    c.loadMap = loadMap;
    c.copyKeyArrayToClipboard = copyKeyArrayToClipboard;
    c.setPrimaryToggle = setPrimaryToggle;
    c.selectExistingMap = selectExistingMap;
    c.loadSavedMap = loadSavedMap;

    c.showHideChildElements = showHideChildElements;
    c.modalPaneType = 'Tables';
    c.ireModel = {
        items: [],
        relationships: []
    }
	
	init();
function	init(){
		selectExistingMap()
	}




    // tracks changes on <sn-record-picker> records
    $scope.$on("field.change", function (evt, params) {
        var field = params.field;
        if (field.table === 'sys_dictionary') {
            if (field.referenceTable) {
                field.referenceTable = ''
                field.referenceField = {
                    displayValue: '',
                    value: ''
                }
            }
            field.referenceTable = getReferenceTable(field);
        }
        if (field.type === 'child') {
            if (field.referenceField) {
                field.referenceField = {
                    displayValue: '',
                    value: ''
                }
            }
        }
        //console.log(field)
    })

    function copyKeyArrayToClipboard() {
        if (c.keyArray && c.keyArray.length > 0) {
            //var str = JSON.stringify(c.keyArray);
            var json = angular.toJson(c.keyArray);
            copyToClipboard(json);
        }
    }

    function copyToClipboard(text) {

        // create temp element
        var copyElement = document.createElement("span");
        copyElement.appendChild(document.createTextNode(text));
        copyElement.id = 'tempCopyToClipboard';
        angular.element(document.body.append(copyElement));

        // select the text
        var range = document.createRange();
        range.selectNode(copyElement);
        window.getSelection().removeAllRanges();
        window.getSelection().addRange(range);

        // copy & cleanup
        document.execCommand('copy');
        window.getSelection().removeAllRanges();
        copyElement.remove();
    }

    function selectExistingMap() {
        var input = {
            action: 'loadMaps'
        };
        c.server.get(input).then(function (response) {
            if (response && response.data) {
                c.savedMaps = response.data.savedMap;
                c.loadModalType = 'map';
                $('#priamryModal').modal('show');
            }
        });

    }

    function loadSavedMap(index) {
        if (c.savedMaps && c.savedMaps[index] && c.savedMaps[index].name) {
					if(c.savedMaps[index].value){
						var mapArray = JSON.parse(c.savedMaps[index].value);
            for (var i = 0; i < mapArray.length; i++) {
                mapArray[i].hidden = false;
            }
            c.keyArray = mapArray;
						c.selectedMapName = c.savedMaps[index].name;
            $('#priamryModal').modal('hide');
					}else {
            c.selectedMapName = c.savedMaps[index].name;
						c.loadModalType = 'payload';
						
         }
            
        } 
    }


    function showHideChildElements(element) {
        element.showDetails = !element.showDetails;
        var stack = element.stack;

        for (var i = 0; i < c.keyArray.length; i++) {
            var key = c.keyArray[i];
            if (key.stack.indexOf(stack) === 0 && key.stack !== stack) {
                c.keyArray[i].hidden = !element.showDetails;
            }
        }

    }

    function setPrimaryToggle(element) {
        element.primary = !element.primary;
        element.active = !element.active;
    }

    //executed if a column is a reference field and returns the reference table name
    function getReferenceTable(field) {
        var input = {
            action: 'getReferenceTable',
            table: field.parentTable,
            element: field.value
        };
        c.server.get(input).then(function (response) {
            if (response && response.data) {
                //console.log(response.data.referenceTable);
                field.referenceTable = response.data.referenceTable;
                //console.log(field);
            }
        })
    }

    //unused init function so far
    /*init();
      function init(){
          var input = {
                  action: 'init'
              }
              c.server
                  .get(input)
                  .then(function(response){
                  if(response && response.data){
  
                  }
              })
      }*/

    function analyzePayload(payload) {
        var input = {
            action: 'analyzePayload',
            payload: payload
        }
        c.server
            .get(input)
            .then(function (response) {
                if (response && response.data) {
                    //console.log(response.data.array);
                    if (c.keyArray) {
                        c.keyArray = mergeKeyArrays(c.keyArray, response.data.array);
                    } else {
                        c.keyArray = response.data.array;
                    }

                    $('#priamryModal').modal('hide');
                }
            })
    }

    function loadMap(mapString) {
        if (mapString) {
            try {
                var mapArray = JSON.parse(mapString);
                for (var i = 0; i < mapArray.length; i++) {
                    mapArray[i].hidden = false;
                }
                c.keyArray = mapArray;
                $('#priamryModal').modal('hide');
            } catch (e) {
                alert(JSON.stringify(e));
            }
        }
    }

    function mergeKeyArrays(oldKeyArray, newKeyArray) {
        for (var i = 0; i < oldKeyArray.length; i++) {
            var matchIndex = findMatchIndex(oldKeyArray[i].stack, newKeyArray);
            if ((matchIndex != false || matchIndex === 0) && newKeyArray[matchIndex]) {
                newKeyArray[matchIndex] = oldKeyArray[i];
            }
        }
        return newKeyArray;
    }

    function findMatchIndex(oldKeyStack, newKeyArray) {
        for (var i = 0; i < newKeyArray.length; i++) {
            if (newKeyArray[i].stack === oldKeyStack) {
                return i;
            }
        }
        return false;
    }

    function saveMap(mapName) {
        //$('#previewModal').modal("show");
        c.savingMap = true;
        var input = {
            action: 'saveMap',
            propertyName: mapName,
            map: c.keyArray
        }
        c.server.get(input).then(function (response) {
            if (response && response.data) {
							if(response.data.saveSuccessFull){
								c.savingMap = false;
								c.successfulSave = true;
							}else{
								c.savingMap = false;
								c.successfulSave = false;
							}
							
            }
        });
    }


    function testIandR() {
        var input = {
            action: 'testIandR',
            sampleInput: c.previewInput
        }
        c.server
            .get(input)
            .then(function (response) {
                if (response && response.data && response.data.previewOutput) {
                    c.previewOutput = response.data.previewOutput;
                }
            });
    }

    function addNewTable() {
        c.ireModel.items.push({
            className: {
                value: '',
                displayValue: '',
                table: 'cmdb_ci_computer'
            },
            values: []
        })
    }



    function deleteTable(tableArray, index) {
        tableArray.splice(index, 1);
    }

    function addNewColumn(table, overrideObjectKey) {
        var obj = {
            column: {
                value: '',
                displayValue: '',
                table: 'sys_dictionary',
                parentTable: table.className.value,
                referenceField: {
                    value: '',
                    displayValue: ''
                }
            },
            objectKey: ''
        };
        if (overrideObjectKey) {
            obj.objectKey = overrideObjectKey;
        }
        table.values.unshift(obj);
    }

    function deleteColumn(columnArray, index) {
        columnArray.splice(index, 1);
    }

    function addNewRelationship() {
        var obj = {
            "parent": {
                "displayValue": "",
                "value": ""
            },
            "child": {
                "displayValue": "",
                "value": "",
                "type": "child",
                "referenceField": {
                    "displayValue": "",
                    "value": ""
                }
            },
            "type": {
                "displayValue": "",
                "value": ""
            }
        }
        c.ireModel.relations.unshift(obj);
    }

    function deleteRelationship(relationshipArray, index) {
        relationshipArray.splice(index, 1);
    }

    function addPayloadKeyToIREModel(sourceIndex, targetIndex) {
        //splits the column id index[0] is the table array index index[1] is the column index within the table element
        var targetIndexArray = targetIndex.split('.');
        if (targetIndexArray.length > 1) {
            if (targetIndexArray[1] === 'new') {
                addNewColumn(c.ireModel.items[targetIndexArray[0]], copyObj(c.keyArray[sourceIndex]));
            } else {
                c.ireModel.items[targetIndexArray[0]].values[targetIndexArray[1]].objectKey = copyObj(c.keyArray[sourceIndex]);
            }

        }
    }

    function copyObj(obj) {
        var newObj = {};
        for (var key in obj) {
            newObj[key] = obj[key];
        }
        return newObj;
    }


    function isDescendant(parent, child) {
        var node = child.parentNode;
        while (node != null) {
            //console.log(node.id);
            if (node == parent) {
                return true;
            }
            node = node.parentNode;
        }
        return false;
    }

    $scope.$watch("c.searchFilter", function (newValue, oldValue) {
        for (var i = 0; i < c.keyArray.length; i++) {
            var element = c.keyArray[i];
            if (newValue && newValue != oldValue) {
                if (element.stack.indexOf(newValue) >= 0) {
                    c.keyArray[i].hidden = false;
                    var split = element.stack.split('.');
                    if (split.length > 1) {
                        var indexOfKey = element.stack.indexOf((element.key));
                        c.keyArray = updateParentKeys(c.keyArray, split, indexOfKey);
                    }
                } else {
                    c.keyArray[i].hidden = true;
                }
            } else {
                c.keyArray[i].hidden = false;
            }
        }

    });

    function updateParentKeys(array, split, indexOfKey) {
        for (var i = 0; i < indexOfKey; i++) {
            array = updateKey(array, split[i]);
        }
        return array;
    }

    function updateKey(array, key) {
        for (var i = 0; i < array.length; i++) {
            if (array[i].key === key) {
                array[i].hidden = false;
                return array;
            }
        }
        return array;
    }

    function allColumnsCompressed(table) {
        for (var i = 0; i < table.values.length; i++) {
            var column = table.values[i];
            if (!column.compress) {
                return false;
            }
        }
        return true;
    }

    function compressOrExpandAllColumns(table, compress) {
        for (var i = 0; i < table.values.length; i++) {
            var column = table.values[i];
            column.compress = compress;
        }
    }

    function buildRelationshipQuery() {
        var query = '';
        //name=sys_rest_message_fn^ORname=x_snc_sn_bridge_map
        for (var i = 0; i < c.ireModel.items.length; i++) {
            var table = c.ireModel.items[i].className.value;
            if (!query) {
                query = 'name=' + table;
            } else {
                query = query + '^ORname=' + table;
            }
        }
        return query;
    }




    // end drag and drop function

}]]></client_script>
        <controller_as>c</controller_as>
        <css>/*div {
    border-style: solid;
    border-width: 1px;
}*/

textarea {
	  border-radius: 4px;
    resize: none;
}

.paneContainer {
  	padding: 0px 5px;
    /* color: #632f2f; */
    font-size: 15px;
}

.columnReference {
  margin-left: 26px;
  //color: white;
}

.columnReference p {
	margin: 4px 4px 4px 0px;	
}

.keyArrayControls{
		border-radius: 8px;
    background-color: #dadada;
    margin-bottom: 8px;
}

.tableModel {
	  margin: 5px 0px 10px 0px;
    padding: 6px;
    background-color: #bdc0c4;;
    border-radius: 4px;

}

.are-you-sure{
    background-color: #ad2323;
    border-radius: 4px;
    padding: 0px 0px 0px 7px;
  	margin: -6px -6px 0px;
  	color: #f5f5f5;
}
.are-you-sure p {
	font-size: 20px
}

.valueArray {
	margin-left: 20px;
}

.columnElement {
    padding-top: 18px;
    background-color: white;
    border-color: white;
    padding-bottom: 5px;
    border-style: solid;
    border-width: 2px;
    border-radius: 5px;
    padding: 10px 8px 10px 8px;
    margin-top: 10px;
    font-size: 15px;
}



.addNewColumn {
		padding-top: 5px;
    border-color: white;
    padding-bottom: 5px;
    border-style: dashed;
    border-width: 2px;
    border-radius: 5px;
    padding: 6px;
    margin-top: 10px;
    text-align: center;
}

.dropBox {
	  border-width: 2px;
    border-style: dashed;
    height: 35px;
    border-radius: 6px;
  	text-align: center;
}

.dropBox label {
	margin-top: 5px;
}

.payloadArrayPane {
    border-style: solid;
    border-radius: 8px;
    background-color: #dadada;
    border-color: #dadada;
    max-height: 76vh;
    min-height: 76vh;
    overflow: auto;
}

.customScroll::-webkit-scrollbar-track
{
  
    background-color: #dadada;
}

.customScroll::-webkit-scrollbar
{
    width: 10px;
    background-color: #dadada;
}

.customScroll::-webkit-scrollbar-thumb
{
    background-color: #959696;;
    //border: 2px solid #555555;
  	border-radius: 5px;
}


.elementBox {
    border-style: solid;
    border-width: 1px;
    border-radius: 3px;
    border-color: #247ba0;
    background-color: #247ba0;
    color: white;
  padding: 2px 0px 2px 10px;
    margin: 7px 0px;
      width: 50%;

}

.selectBox {
      float: right;
   	 font-size: 28px;
}

.primaryBox {    
  	float: right;
    height: 32px;
    padding: 6px 2px 7px 2px;
    margin: -3px -2px 0px 5px;
    border-radius: 0px 4px 4px 0px;
    background-color: #1f8476;
}

.inactivePrimaryBox{
	background-color: #247ba0;
}

.parentRep {
		padding-left: 6px;
    margin-top: 5px;
    margin-bottom: 5px;
    border-style: solid;
    border-width: 1px;
    border-radius: 3px;
    border-color: #454b4e;
    background-color: #454b4e;
    color: white;
        padding: 2px 0px 2px 10px;
      width: 50%;
}

.slide {
	//margin-left: 10px;
  -webkit-transition:max-height ease-out .5s;
  transition:max-height ease-out .5s;
  overflow: hidden;
  //max-height:0;
  max-height: 255px;
  //max-height: 100%;
}


/*.collapsing {
	overflow: hidden;
  transition: height 0.35s ease;
  position: relative;
  height: 0;
}

.collapse {
 display: none;
}

.collapse.in {
	display: block !important;
  height: 100%;
}*/

.slide.elDetail {
	max-height: 75px;
  -webkit-transition:max-height ease-in .2s;
  transition:max-height ease-in .2s;
}



.slide.ng-hide {
  max-height: 0;
}

.slide.ng-hide-add,
.slide.ng-hide-remove{
  display:block!important;
  overflow: hidden;
}

.elementDetail label {
	width: 100%;
  margin-left: 10px;
}

.over {
	border-style: solid;
  border-color: #247ba0;
}

.close-x {
    float: right;
    margin-right: 5px;
    margin-top: 4px;
    font-size: 12px;
}

.close-x:hover {
	opacity:0.7;
}

.clear {
    float: right;
    margin-right: 5px;
    
}

.clear:hover{
	cursor: pointer;
  text-decoration: underline;
}

button.confirm {
		background-color: #247ba0;
    width: 69px;
}

button.cancel {
		background-color: #6d6d6d;
    width: 69px;
}

.confirm-buttons{
		padding-bottom: 6px;
}


.addNew {
		font-size: 17px;
    margin-top: 7px;
  	margin-bottom: 0px;
  	color: #247ba0;
}

.addNew:hover{
	cursor: pointer;
  //color: #d4d4d4 !important;
  opacity: 0.7;
}

.addNew .fa-plus {
		border-style: solid;
    border-width: 1px;
    padding: 2px 3px 3px 3px;
    border-radius: 18px;
    height: 21px;
    width: 21px;
}

.outer-add {
	text-align: center;
}

.column-compress-carrot {
	  float: left;
    margin-top: 12px;
}


/* Style the buttons inside the tab */
.tab {
  padding: 0px;
	text-align: center;
}

.tab button {
  background-color: inherit;
  border: none;
  outline: none;
  cursor: pointer;
  padding: 14px 16px;
  transition: 0.3s;
  font-size: 16px;
  width: 49%;
}

/* Change background color of buttons on hover */
.tab button:hover {
  background-color: #ddd;
  
}

.tab .selected {
	background-color: #ddd;
}

.tab .small {
	    padding: 6px 16px;
}
/* Create an active/current tablink class */
.tab button.active {
  background-color: #ccc;
}

/* Style the tab content */
.tabcontent {
  //display: none;
  padding: 6px 12px;
  border: 1px solid #ccc;
  border-top: none;
}

#previewModal pre {
	max-height: 78vh;
}

#previewModal .modal-header {
	 padding-bottom: 3px;
}

.testButton {
		width: 100%;
    border-radius: 2px;
    background-color: #5a7f71;
    border-color: #80b4a0;
    color: white;
}

.testButton:hover{
	opacity: 90%;
}

#previewModal pre.halfHeight {
	max-height: 39vh;
}

.analyze-new-payload{
	  text-align: center;
    margin-top: 42vh;
}

#search {
  width: 79%;
  display: unset;
}

.btn.ireButton{
  	background-color: #3f4256;
    color: white;
    width: 48%;
    height: 39px;
    margin-bottom: 7px;
}
.btn.ireButton:hover{
	opacity: 90%
}

.mapList{
	font-size: 18px;
  text-align: center;
  font-weight: 600;
  width: 100%;
  border-radius: 13px;
}

.mapList:hover{
	text-decoration: underline;
  background-color: #247ba0;
  cursor: pointer;
  color: white;
}

.selectedProperty{
  	background-color: #247ba0;
    color: white;
    font-weight: bold;
    padding: 4px 9px 5px 7px;
    text-align: center;
    font-size: 18px;
    margin: 0px 11%;
    border-radius: 8px;
}

.searchField {
		background-color: #ffffff;
    border-radius: 30px;
    border: 1px solid #ccc;
    padding-left: 38px;
    font-size: 23px;
    max-width: 0;
    transition: all 0.3s ease-in-out;
  	border: none;
  	box-shadow: none;
}

.filter-header .filter-header-title {
		position: absolute;
    top: 10px;
    left: 122px;
    color: #dadada;
    opacity: 0;
    transition-delay: 0.3s;
    transition: all 0.3s ease-in-out;
}

.filter-header-title.filter-header-title-visible {
    left: 88px;
    opacity: 1;
}

.searchField.searchField-expanded {
		padding-left: 50px;
    max-width: 2000px;
}

.filter-header-search-toggle {
		height: 34px;
    width: 45px;
    position: absolute;
    top: 10px;
    left: 12px;
    border-top-left-radius: 22px;
    border-bottom-left-radius: 22px;
    transition: all .3s ease-in-out;
    box-shadow: none;
    border: none;
}

.filter-header {
        background-color: #3f4256;
    padding: 10px 13px 10px 13px;
    width: 75%;
    border-top-left-radius: 8px;
    margin-bottom: 4px;
    display: inline-block;
}
.filterButtonGroup{
  	display: inline-block;
    background-color: #dadada;
    width: 24%;
    padding: 9px 4px 0px 7px;
    border-radius: 5px;
}


</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>x_156954_payload_m_mapping_helper</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>Mapping Helper</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
  /* populate the 'data' object */
  /* e.g., data.table = $sp.getValue('table'); */

	if(input){
		//var uiHelper = new IREMapUIHelper();
		var mapManager = new MapManager();
		var payloadScanner = new  PayloadScanner();
		
		if(input.action === 'analyzePayload' && input.payload){
			data.array = payloadScanner.analyzePayload(input.payload);
		}
		if(input.action === 'loadMaps'){
			
			data.savedMap = mapManager.getMaps();
		}
		if(input.action === 'saveMap'){
			data.saveSuccessFull = mapManager.saveMap(input.propertyName, input.map);
			
		}
		
		
		/*if(input.action === 'getReferenceTable'){
			data.referenceTable = uiHelper.getReferenceTable(input.table, input.element);
		}
		
		if(input.action === 'previewMap' && input.map && input.payload){
			
			var simplifiedModel = uiHelper.constructSimplifiedMap(input.map);
			data.simplifiedModel = simplifiedModel;
			var relationalMap = ireMap.initializeMap(input.map);
			var ireObj = ireMap.processObj(JSON.parse(input.payload), 'ServiceNow');
			data.previewInput = ireObj;
		}
		
		if(input.action === 'testIandR' && input.sampleInput){
			var output = ireMap.importPayload(input.sampleInput, 'ServiceNow');
			data.previewOutput = JSON.parse(output);
		}*/
	}
	
	
	
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>erik.anderson</sys_created_by>
        <sys_created_on>2020-05-14 13:51:19</sys_created_on>
        <sys_id>f41a4a7e2fdb9410a8ce2b5df699b6d5</sys_id>
        <sys_mod_count>957</sys_mod_count>
        <sys_name>Mapping Helper</sys_name>
        <sys_package display_value="Payload Mapper" source="x_156954_payload_m">cf93c6762fdb9410a8ce2b5df699b624</sys_package>
        <sys_policy/>
        <sys_scope display_value="Payload Mapper">cf93c6762fdb9410a8ce2b5df699b624</sys_scope>
        <sys_update_name>sp_widget_f41a4a7e2fdb9410a8ce2b5df699b6d5</sys_update_name>
        <sys_updated_by>erik.anderson</sys_updated_by>
        <sys_updated_on>2020-10-15 12:42:50</sys_updated_on>
        <template><![CDATA[<div>
	<!--<label>{{c.ireModel}}</label>-->
	<!--<div class="col-sm-12">
        <button type="button" class="btn btn-success" ng-click="c.previewMap()" ng-disabled="!c.payload || !c.ireModel">
            Preview Map
        </button>
    </div>-->

	<!--<label>{{c.ireModel}}</label>-->
	<div class="paneContainer">
		<div class="keyArrayControls">
      
      <div class="form-group has-feedback has-feedback-left filter-header">
            <input 
                ng-model="c.searchFilter"
                placeholder="Search"
                class="form-control searchField searchField-expanded"
            >
            <button class="filter-header-search-toggle"
                
                 style="border:none;"
                 >
            	<i 
                 class="fa fa-search filter-header-search-icon form-control-feedback"  
                 aria-hidden="true" style="margin: 4px 3px 0px 0px; font-size: 24px;">
              </i>  
            </button>
        </div>
      <div class="filterButtonGroup">
        <button type="button" class="btn ireButton" data-toggle="modal" ng-click="c.saveMap(c.selectedMapName)"	>
					<span ng-if="!c.savingMap">Save Map <i ng-if="c.successfulSave" class="fa fa-check-circle-o"></i></span>
					<span ng-if="c.savingMap">Saving <i class="fa fa-spinner fa-spin"></i></span>
				</button>
				<button type="button" class="btn ireButton" data-toggle="modal" ng-click="c.loadModalType = 'payload'"
					data-target="#priamryModal" >
					New Payload
				</button>
      </div>
      
      
			<!--<input type="input" class="form-control" ng-model="c.searchFilter" id="search" placeholder="Search">-->
			<div style="padding-bottom: 4px;">
				
				<h3 class="selectedProperty">{{c.selectedMapName.split('.')[1]}}</h3>
				
				
			</div>
			<!--<div class="selectedProperty">
					{{c.selectedMapName.split('.')[1]}}
				</div>-->
			
			
		</div>
		<div class="col-sm-12 payloadArrayPane customScroll">
			<div class="col-sm-12 analyze-new-payload" ng-if="!c.keyArray">
				<h3>
					Select a map from the system properties list that you would like to edit.
				</h3>
				<!--<button type="button" class="btn ireButton" data-toggle="modal" ng-click="c.loadModalType = 'payload'"data-target="#priamryModal">New Map From Payload</button>-->
				<button type="button" class="btn ireButton" data-toggle="modal" ng-click="c.selectExistingMap()">Edit
					Select Map</button>

			</div>
			<div ng-if="c.keyArray && c.keyArray.length > 1">
				<div class="col-sm">
					<div ng-hide="element.hidden" id="{{$index}}"
						ng-class="{'elementBox canDrag' : !element.parentRep, 'parentRep': element.parentRep}"
						ng-repeat="element in c.keyArray"
						ng-style="{'margin-left': element.level * 30, 'opacity': element.active ? '100%' : '75%'}">
						<div ng-if="!element.parentRep" ng-click="element.active = !element.active">
							<div class="col-sm">
								<span><label><strong>{{element.key}}:</strong> </label>
									<label>{{element.type}}</label></span>

								<button
									ng-class="{'btn primaryBox' : element.primary, 'btn primaryBox inactivePrimaryBox' : !element.primary}"
									style="float:right;" ng-click="c.setPrimaryToggle(element);">
									<i class="fa fa-key" style="font-size: 19px; margin-top: 0px; margin-left: 4px;"
										ng-if="element.primary"></i>
									<i class="fa fa-minus" style="font-size: 22px; margin: 0px 3px 0px 3px;"
										ng-if="!element.primary"></i>
								</button>
								<!--<span ng-if="!element.primary" ng-click="element.primary = !element.primary">Set As Pimary</span> -->
								<i
									ng-class="{'fa fa-circle-o selectBox' : !element.active , 'fa fa-check-circle-o selectBox' : element.active}"></i>


							</div>
							<!--<div class="col-sm elementDetail slide elDetail" ng-hide="!element.showDetails">-->
							<!--<label><strong>Stack:</strong> {{element.stack}}</label>-->
							<!--<label><strong>Value:</strong> {{element.value}}</label>-->
							<!--   <label><strong>Type:</strong> {{element.type}}</label>
                        </div>-->

						</div>
						<div ng-if="element.parentRep">
							<div class="col-sm" ng-click="element.active = !element.active">
								<i ng-class="{'fa fa-caret-right' : !element.showDetails , 'fa fa-caret-down' : element.showDetails}"
									ng-click="element.active = !element.active; c.showHideChildElements(element)"></i>
								<label><strong>{{element.key}}:</strong> </label> <label>{{element.type}}</label>
								<i
									ng-class="{'fa fa-circle-o selectBox' : !element.active , 'fa fa-check-circle-o selectBox' : element.active}"></i>
							</div>
						</div>
					</div>

				</div>
			</div>

		</div>
	</div>
</div>



<div class="modal fade" id="priamryModal" role="dialog">
	<div class="modal-dialog">

		<!-- Modal content-->
		<div class="modal-content" ng-show="c.loadModalType === 'payload'">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal">&times;</button>
				<h4 class="modal-title">Analyze Paylod</h4>
			</div>
			<div class="modal-body">
				<p><strong>Paste you example payload here and click analyze.</strong></p>
				<textarea style="width: 100%; height: 453px;" ng-model="c.payload"></textarea>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
				<button type="button" class="btn btn-primary" ng-click="c.analyzePayload(c.payload)">Analyze</button>
			</div>
		</div>

		<div class="modal-content" ng-show="c.loadModalType === 'map'">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal">&times;</button>
				<h4 class="modal-title">Analyze Map</h4>
			</div>
			<div class="modal-body text-center">
				<p><strong>Select one of the system properties that stores mapping data that you want to edit</strong>
				</p>
				<label ng-repeat="map in c.savedMaps" class="mapList"
					ng-click="c.loadSavedMap($index)">{{map.suffix}}</label>
				<!--<textarea style="width: 100%; height: 453px;" ng-model="c.loadMapString"></textarea>-->
			</div>
			<!--<div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" ng-click="c.loadMap(c.loadMapString)">Load</button>
            </div>-->
		</div>

	</div>

</div>

<div class="modal fade" id="previewModal">
	<div class="modal-dialog modal-lg">
		<div class="modal-content">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal">&times;</button>
				<button type="button" class="btn btn-primary" ng-click="c.copyKeyArrayToClipboard()">
					Copy To Clipboard
				</button>
				<!--<div class="tab">
                    <button
                        ng-class="{'tablinks selected' : c.previewTab ==='Preview' , 'tablinks': c.previewTab !== 'Preview'}"
                        ng-click="c.previewTab ='Preview'">Map Preview</button>
                    <button
                        ng-class="{'tablinks selected' : c.previewTab ==='Input' , 'tablinks': c.previewTab !== 'Input'}"
                        ng-click="c.previewTab ='Preview'">Sample IRE Input</button>
                </div>-->

			</div>
			<div class="modal-body">
				<!--<div ng-if="c.previewTab === 'Preview'">-->
				<pre class="customScroll">{{c.keyArray | json}}</pre>
				<!-- </div>-->

				<!-- <div ng-if="c.previewTab === 'Input'">
                    <pre
                        ng-class="{'halfHeight customScroll' : c.previewOutput, 'customScroll': !c.previewOutput}">{{c.previewInput | json}}</pre>

                    <div ng-if="c.previewOutput">
                        <label>IRE Output</label>
                        <pre class="customScroll" style="max-height: 39vh">{{c.previewOutput | json}}</pre>
                    </div>


                    <button ng-if="!c.previewOutput" class="btn testButton" ng-click="c.testIandR()">
                        Test Identify and Reconcile
                    </button>
                </div>-->

			</div>
		</div>
	</div>
</div>]]></template>
    </sp_widget>
</record_update>
