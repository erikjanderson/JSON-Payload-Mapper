<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_156954_payload_m.PayloadScanner</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>PayloadScanner</name>
        <script><![CDATA[var PayloadScanner = Class.create();
PayloadScanner.prototype = {
    initialize: function() {
    },
	
	analyzePayload: function(payload, incSampVal){
		try{
			this.includeSampleValue = incSampVal;
			var obj;
			if(typeof payload == 'string'){
				obj = JSON.parse(payload);
			}else{
				obj = payload;
			}
			obj = new PreProcessor().process(obj);
			// stringify and then parse object to remove any weird GlideRecord nesting
			var tempString = JSON.stringify(obj);
			obj = JSON.parse(tempString);
			var keyObj = this.scanObject(obj, 0);
			var array = this.polishObj(keyObj);
			return array;
		}catch(e){
			gs.error(JSON.stringify(e));
		}
	},
	
	polishObj: function(keyObj){
		var returnArray = [];
		for(var key in keyObj){
			returnArray.push(keyObj[key]);
		}
		return returnArray;
	},
	scanObject: function(obj, level, stack, arrayObj){
		if(!arrayObj){
			arrayObj = {};
		}
		
		for(var key in obj){
			var newStack = this.getStack(key, stack);
			var type = this.getType(obj[key]);
			if(type.val === 'object'){
				arrayObj[newStack] = new this.PayloadElement(newStack, key, obj[key], level, type.val, this.includeSampleValue);
				arrayObj = this.scanObject(obj[key], level + 1, newStack, arrayObj);
			}else if(type.val === 'array' && type.isComplexArray){
				arrayObj[newStack] = new this.PayloadElement(newStack, key, obj[key], level, type.val, this.includeSampleValue);
				arrayObj = this.scanArray(obj[key], level + 1, newStack, arrayObj);
			}else{
				arrayObj[newStack] = new this.PayloadElement(newStack, key, obj[key], level, type.val, this.includeSampleValue);
			}
		}
		return arrayObj;
	},

	scanArray: function(array, level, stack, arrayObj){
		for(var i = 0; i < array.length; i++){
			arrayObj = this.scanObject(array[i], level, stack, arrayObj);
		}
		return arrayObj;
	},

	getStack: function(key, stack){
		if(!stack){
			stack = key;
		}else{
			stack = stack + '.' + key;
		}
		return stack;
	},

	getType: function(val) {
		var type = {};
		type.val = typeof val;
		if (type.val === 'object') {
			if (Array.isArray(val)) {
				type.val = 'array';
				if(val[0]){
					if(typeof val[0] == 'object'){
						type.isComplexArray = true;
					}
				}
			}
		}
		return type;
    },
	
	PayloadElement: function(stack, key, value, level, type, includeSampleVal){
		this.stack = stack;
		this.key = key;
		var tempVal = '';
		if(type != 'object' && type !='array'){
			tempVal = value;
			if(tempVal && tempVal.length){
				this.maxLength = tempVal.length + ( tempVal.length * 0.3);
			}else{
				this.maxLength = 40;
			}
		}else if((type == 'object' || type == 'array')){
			tempVal = JSON.stringify(value);
			if(tempVal && tempVal.length > 2){
				this.maxLength = tempVal.length + ( tempVal.length * 0.5);
			}else{
				this.maxLength = 500;
			}
		}
		this.maxLength = parseInt(this.maxLength);
		if(this.maxLength < 40){
			this.maxLength = 40;
		}
		if(includeSampleVal){
			this.sampe_value = tempVal;
		}
		if(type == 'object' || type == 'array'){
			this.parentRep = true;
			this.showDetails = true;
		}
		this.active = false;
		this.level = level;
		this.type = type;
	},

    type: 'PayloadScanner'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>erik.anderson</sys_created_by>
        <sys_created_on>2020-09-20 19:46:34</sys_created_on>
        <sys_id>a27b4ebe2fdb9410a8ce2b5df699b602</sys_id>
        <sys_mod_count>13</sys_mod_count>
        <sys_name>PayloadScanner</sys_name>
        <sys_package display_value="Payload Mapper" source="x_156954_payload_m">cf93c6762fdb9410a8ce2b5df699b624</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Payload Mapper">cf93c6762fdb9410a8ce2b5df699b624</sys_scope>
        <sys_update_name>sys_script_include_a27b4ebe2fdb9410a8ce2b5df699b602</sys_update_name>
        <sys_updated_by>erik.anderson</sys_updated_by>
        <sys_updated_on>2020-11-05 16:26:59</sys_updated_on>
    </sys_script_include>
</record_update>
